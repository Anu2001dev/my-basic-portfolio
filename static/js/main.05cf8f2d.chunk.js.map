{"version":3,"sources":["images/profile pic.svg","images/anime.svg","components/navbar.jsx","components/intro.jsx","serviceWorker.js","index.js"],"names":["module","exports","Navitem","this","props","href","text","children","className","contentOrText","Component","Navbar","src","ProfilePic","alt","id","Intro","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,mLCIrCC,E,uKACM,IAAD,EAC0BC,KAAKC,MAA9BC,EADD,EACCA,KAAMC,EADP,EACOA,KAAMC,EADb,EACaA,SACpB,OACE,wBAAIC,UAAU,YACZ,uBAAGH,KAAMA,EAAMG,UAAU,YACtBL,KAAKM,cAAcH,EAAMC,O,oCAKpBD,EAAMC,GAClB,OAAOD,EAAO,0BAAME,UAAU,YAAYF,GAAeC,M,GAZvCG,aAoCPC,E,uKAlBX,OACE,6BACE,4BACE,kBAAC,EAAD,KACE,yBAAKH,UAAU,mBACb,yBAAKI,IAAKC,IAAYC,IAAI,cAAcC,GAAG,aAC3C,0BAAMP,UAAU,SAAhB,yBAGJ,kBAAC,EAAD,CAASF,KAAK,OAAOD,KAAK,MAC1B,kBAAC,EAAD,CAASC,KAAK,cAAcD,KAAK,cACjC,kBAAC,EAAD,CAASC,KAAK,aAAaD,KAAK,mB,GAbrBK,a,OCMNM,E,4MAtBbC,MAAQ,G,uDAEN,OACE,yBAAKT,UAAU,kBACb,kBAAC,kBAAD,MACA,yBAAKA,UAAU,SACb,0BAAMA,UAAU,aAAhB,gCACA,6BACA,0BAAMA,UAAU,YAAhB,0CAEE,6BAFF,2EAKA,gCACE,uBAAGH,KAAK,aAAR,2B,GAfQK,aCSAQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05cf8f2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile pic.2c01c6df.svg\";","module.exports = __webpack_public_path__ + \"static/media/anime.33172fdd.svg\";","import React, { Component } from \"react\";\r\nimport ProfilePic from \"../images/profile pic.svg\";\r\n// import { ReactComponent as Chakra } from \"../svgs/chakra.svg\";\r\n\r\nclass Navitem extends Component {\r\n  render() {\r\n    const { href, text, children } = this.props;\r\n    return (\r\n      <li className=\"nav-item\">\r\n        <a href={href} className=\"nav-link\">\r\n          {this.contentOrText(text, children)}\r\n        </a>\r\n      </li>\r\n    );\r\n  }\r\n  contentOrText(text, children) {\r\n    return text ? <span className=\"nav-text\">{text}</span> : children;\r\n  }\r\n}\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <ul>\r\n          <Navitem>\r\n            <div className=\"title-container\">\r\n              <img src={ProfilePic} alt=\"profile pic\" id=\"prof-pic\" />\r\n              <span className=\"title\">Anupama Dissanayake</span>\r\n            </div>\r\n          </Navitem>\r\n          <Navitem text=\"Home\" href=\"/\" />\r\n          <Navitem text=\"My Projects\" href=\"/projects\" />\r\n          <Navitem text=\"Contact Me\" href=\"/contact\" />\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport { ReactComponents as Anime } from \"../images/anime.svg\";\n\nclass Intro extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"main-container\">\n        <Anime />\n        <div className=\"intro\">\n          <span className=\"main-text\">Hi! I am Anupama Dissanayake</span>\n          <br />\n          <span className=\"sub-text\">\n            I am a programmer and a web developerer\n            <br /> I have experience in javascript, html, css while expertising\n            in python\n          </span>\n          <button>\n            <a href=\"/projects\">View my projects</a>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Intro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport NavBar from \"./components/navbar\";\nimport Intro from \"./components/intro\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <NavBar />\n    <Intro />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}